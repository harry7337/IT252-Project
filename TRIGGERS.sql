DROP TRIGGER IF EXISTS GENERATE_BILLING;
DROP TRIGGER IF EXISTS UPDATE_CAR_DETAILS;
DROP FUNCTION IF EXISTS get_mileage;
DROP TRIGGER IF EXISTS NEW_CAR_AVAILABLE;

DELIMITER //
CREATE TRIGGER GENERATE_BILLING
AFTER UPDATE ON BOOKING_DETAILS
FOR EACH ROW
BEGIN
  DECLARE lastBillId CHAR(6);
  DECLARE newBillId CHAR(6);
  DECLARE discountAmt FLOAT(10,2);
  DECLARE totalLateFee FLOAT(10,2);
  DECLARE totalTax FLOAT(10,2);
  DECLARE totalAmountBeforeDiscount FLOAT(10,2);
  DECLARE finalAmount FLOAT(10,2);
  IF IFNULL((NEW.ACT_RET_DT_TIME),'NULL') <> 'NULL' AND NEW.BOOKING_STATUS ='R' THEN
   
    SELECT x.BILL_ID INTO lastBillId FROM 
      ( 
        SELECT BILL_ID, ROWNUM AS RN FROM  BILLING_DETAILS
        WHERE RN= (SELECT MAX(ROWNUM) FROM BILLING_DETAILS);
      )x 
     
    
    SET newBillId = 'BL' || CHAR(CAST( SUBSTRING(lastBillId,3) AS UNSIGNED )+1);
    
    CALL CALCULATE_LATE_FEE_AND_TAX(NEW.ACT_RET_DT_TIME, NEW.RET_DT_TIME, NEW.REG_NUM,NEW.AMOUNT, totalLateFee, totalTax);
    
    SET totalAmountBeforeDiscount = NEW.AMOUNT + totalLateFee + totalTax;
    
    CALL CALCULATE_DISCOUNT_AMOUNT(NEW.DL_NUM, totalAmountBeforeDiscount, NEW.DISCOUNT_CODE, discountAmt);
    
    SET finalAmount = totalAmountBeforeDiscount - discountAmt;  
    -- insert new bill into the billing_details table
    INSERT INTO BILLING_DETAILS (BILL_ID,BILL_DATE,BILL_STATUS,DISCOUNT_AMOUNT,TOTAL_AMOUNT,TAX_AMOUNT,BOOKING_ID,TOTAL_LATE_FEE) 
    VALUES (newBillId,SYSDATE(),'P',discountAmt,finalAmount,totalTax,NEW.BOOKING_ID,totalLateFee);
  END IF;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER UPDATE_CAR_DETAILS
AFTER UPDATE ON BOOKING_DETAILS
FOR EACH ROW
BEGIN
    IF NEW.BOOKING_STATUS ='C' THEN
      UPDATE CAR SET LOC_ID = NEW.PICKUP_LOC WHERE REGISTRATION_NUMBER = NEW.REG_NUM;
      UPDATE CAR SET AVAILABILITY_FLAG = 'A' WHERE REGISTRATION_NUMBER = NEW.REG_NUM;
       
    ELSE 
      IF IFNULL((NEW.ACT_RET_DT_TIME),'NULL') <> 'NULL' THEN
        UPDATE CAR SET AVAILABILITY_FLAG = 'A' , LOC_ID = NEW.DROP_LOC, MILEAGE = MILEAGE+get_mileage() WHERE REGISTRATION_NUMBER = NEW.REG_NUM;
      END IF;
    END IF;
END //



CREATE FUNCTION get_mileage() RETURNS INTEGER
DETERMINISTIC
BEGIN
  DECLARE mileage INTEGER;
  SET mileage = FLOOR(RAND()*(10000-100+1)+100);
  RETURN mileage;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER NEW_CAR_AVAILABLE
BEFORE UPDATE
ON CAR FOR EACH ROW
BEGIN
INSERT INTO CAR VALUES('SDF4567','FIESTA','FORD',2015,15000,'ECONOMY','L102','N');
END //
DELIMITER ;